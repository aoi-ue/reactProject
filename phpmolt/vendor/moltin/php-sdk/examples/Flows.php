<?php

require_once('./init.php');

try {

    // in this example, we're going to extend a products attributes
    // NOTE: If you change this you will need to update the code below the flow setup
    // as this example relies on the products being updated
    $slug = "products";
    $unique = sha1(rand(0,5000) . microtime());

    // let's see if a flow already exists for products...
    $flow = false;
    foreach($moltin->flows->all()->data() as $existingFlow) {
        if ($existingFlow->slug === $slug) {
            $flow = $existingFlow;
            break;
        }
    }

    // we don't already have one, let's create a new flow
    if (!$flow) {
        $flow = $moltin->flows->create([
            "type" => "flow",
            "name" => "New Product Flow (" . $unique . ")",
            "slug" => "products",
            "description" => "An example flow generated by the PHP SDK",
            "enabled" => true
        ])->data();
    }

    // the flow is disabled, let's enable it for the example
    if ($flow->enabled === false) {
        $flow = $moltin->flows->update($flow->id, [
            "data" => [
                "type" => "flow",
                "name" => $flow->name,
                "slug" => $flow->slug,
                "description" => $flow->description,
                "enabled" => true
            ]
        ])->data();
    }

    // let's create a new field on our products
    $fieldPayload = [
        "type" => "field",
        "field_type" => "string",
        "slug" => "a_custom_field_" . $unique,
        "name" => "Custom Product Field",
        "description" => "A custom product field generated by the PHP SDK",
        "required" => false,
        "unique" => false
    ];

    $field = $moltin->flows->createField($flow->id, $fieldPayload)->data();

    // NOTE: if you changed the flow slug from `products` the rest of this example will not work
    $product = $moltin->products->create([
        'type' => 'product',
        'name' => 'My Product ' . $unique,
        'slug' => 'my-product ' . $unique,
        'sku' => 'my.prod.' . $unique,
        'description' => 'a bit about it',
        'manage_stock' => false,
        'status' => 'live',
        'commodity_type' => 'digital',
        'price' => [
            'amount' => 0,
            'currency' => 'USD',
            'includes_tax' => false
        ],

        // NOTE: this is your new field, you pass it as an attribute
        $fieldPayload['slug'] => '<p>welcome to flows!</p>'
    ])->data();

    $format = 'table';
    if (isset($argv[1])) {
        if (explode("=", $argv[1])[1] === 'json') {
            $format = 'json';
        }
    }

    if ($format === 'table') {

        $table = new Console_Table();
        $table->setHeaders(['Name', $fieldPayload['name']]);

        $slug = $fieldPayload['slug'];

        $table->addRow([
            $product->name,
            $product->$slug
        ]);

        echo $table->getTable();

    } else if ($format === 'json') {

        print_r($response->getRaw());

    }

} catch(Exception $e) {

    echo 'An exception occurred calling the moltin API:';
    var_dump($e);
    exit;

}
